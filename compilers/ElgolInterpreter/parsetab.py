# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = "3.10"

_lr_method = "LALR"

_lr_signature = "programCOMMA COMP DIFERENTE DIVIDE DOT ELGIO ENQUANTO ENTAO EQUALS FIM FUNCTION_NAME IDENTIFIER IGUAL INICIO INTEGER INTEIRO LPAREN MAIOR MENOR MINUS PLUS RPAREN SE SENAO TIMES ZEROprogram : component_listcomponent_list : component_list component\n                          | component\n                          | emptycomponent : function_definition\n                     | main_blockfunction_definition : type_specifier FUNCTION_NAME LPAREN parameters_opt RPAREN DOT blockparameters_opt : parameter_list\n                          | emptyparameter_list : parameter_list COMMA parameter\n                           | parameterparameter : type_specifier IDENTIFIERtype_specifier : INTEIROmain_block : blockblock : INICIO DOT statement_list_opt FIM DOTstatement_list_opt : statement_list\n                              | emptystatement_list : statement_list statement\n                          | statementvariable_declaration : type_specifier IDENTIFIERstatement : variable_declaration DOT\n                     | expression_statement DOT\n                     | if_statement\n                     | while_statementexpression_statement : expressionif_statement : SE expression DOT ENTAO DOT block senao_optsenao_opt : SENAO DOT block\n                     | emptywhile_statement : ENQUANTO expression DOT blocklvalue : IDENTIFIER\n                  | ELGIOexpression : lvalue EQUALS expressionexpression : expression PLUS expression\n                      | expression MINUS expression\n                      | expression TIMES expression\n                      | expression DIVIDE expression\n                      | expression MAIOR expression\n                      | expression MENOR expression\n                      | expression IGUAL expression\n                      | expression DIFERENTE expressionexpression : COMP expressionexpression : LPAREN expression RPARENexpression : INTEGERexpression : ZEROexpression : IDENTIFIER\n                      | ELGIOexpression : FUNCTION_NAME LPAREN argument_list_opt RPARENargument_list_opt : argument_list\n                             | emptyargument_list : argument_list COMMA expression\n                         | expressionempty :"

_lr_action_items = {
    "INTEIRO": (
        [
            0,
            2,
            3,
            4,
            5,
            6,
            8,
            11,
            13,
            14,
            16,
            18,
            21,
            22,
            41,
            42,
            43,
            61,
            62,
            82,
            85,
            88,
            89,
            91,
            93,
        ],
        [
            9,
            9,
            -3,
            -4,
            -5,
            -6,
            -14,
            -2,
            9,
            9,
            9,
            -19,
            -23,
            -24,
            -18,
            -21,
            -22,
            9,
            -15,
            -29,
            -7,
            -52,
            -26,
            -28,
            -27,
        ],
    ),
    "INICIO": (
        [
            0,
            2,
            3,
            4,
            5,
            6,
            8,
            11,
            62,
            72,
            79,
            85,
            86,
            92,
        ],
        [
            10,
            10,
            -3,
            -4,
            -5,
            -6,
            -14,
            -2,
            -15,
            10,
            10,
            -7,
            10,
            10,
        ],
    ),
    "$end": (
        [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            8,
            11,
            62,
            85,
        ],
        [
            -52,
            0,
            -1,
            -3,
            -4,
            -5,
            -6,
            -14,
            -2,
            -15,
            -7,
        ],
    ),
    "FUNCTION_NAME": (
        [
            7,
            9,
            13,
            16,
            18,
            21,
            22,
            26,
            27,
            29,
            30,
            41,
            42,
            43,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            55,
            58,
            62,
            82,
            84,
            88,
            89,
            91,
            93,
        ],
        [
            12,
            -13,
            34,
            34,
            -19,
            -23,
            -24,
            34,
            34,
            34,
            34,
            -18,
            -21,
            -22,
            34,
            34,
            34,
            34,
            34,
            34,
            34,
            34,
            34,
            34,
            -15,
            -29,
            34,
            -52,
            -26,
            -28,
            -27,
        ],
    ),
    "IDENTIFIER": (
        [
            9,
            13,
            16,
            18,
            21,
            22,
            23,
            26,
            27,
            29,
            30,
            35,
            41,
            42,
            43,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            55,
            58,
            62,
            82,
            84,
            88,
            89,
            91,
            93,
        ],
        [
            -13,
            24,
            24,
            -19,
            -23,
            -24,
            44,
            24,
            24,
            24,
            24,
            59,
            -18,
            -21,
            -22,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            -15,
            -29,
            24,
            -52,
            -26,
            -28,
            -27,
        ],
    ),
    "DOT": (
        [
            10,
            19,
            20,
            24,
            25,
            31,
            32,
            33,
            40,
            44,
            53,
            54,
            56,
            60,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            73,
            74,
            81,
            83,
            90,
        ],
        [
            13,
            42,
            43,
            -45,
            -25,
            -43,
            -44,
            -46,
            62,
            -20,
            71,
            72,
            -41,
            79,
            -33,
            -34,
            -35,
            -36,
            -37,
            -38,
            -39,
            -40,
            -32,
            -42,
            86,
            -47,
            92,
        ],
    ),
    "LPAREN": (
        [
            12,
            13,
            16,
            18,
            21,
            22,
            26,
            27,
            29,
            30,
            34,
            41,
            42,
            43,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            55,
            58,
            62,
            82,
            84,
            88,
            89,
            91,
            93,
        ],
        [
            14,
            30,
            30,
            -19,
            -23,
            -24,
            30,
            30,
            30,
            30,
            58,
            -18,
            -21,
            -22,
            30,
            30,
            30,
            30,
            30,
            30,
            30,
            30,
            30,
            30,
            -15,
            -29,
            30,
            -52,
            -26,
            -28,
            -27,
        ],
    ),
    "FIM": (
        [
            13,
            15,
            16,
            17,
            18,
            21,
            22,
            41,
            42,
            43,
            62,
            82,
            88,
            89,
            91,
            93,
        ],
        [
            -52,
            40,
            -16,
            -17,
            -19,
            -23,
            -24,
            -18,
            -21,
            -22,
            -15,
            -29,
            -52,
            -26,
            -28,
            -27,
        ],
    ),
    "SE": (
        [
            13,
            16,
            18,
            21,
            22,
            41,
            42,
            43,
            62,
            82,
            88,
            89,
            91,
            93,
        ],
        [
            26,
            26,
            -19,
            -23,
            -24,
            -18,
            -21,
            -22,
            -15,
            -29,
            -52,
            -26,
            -28,
            -27,
        ],
    ),
    "ENQUANTO": (
        [
            13,
            16,
            18,
            21,
            22,
            41,
            42,
            43,
            62,
            82,
            88,
            89,
            91,
            93,
        ],
        [
            27,
            27,
            -19,
            -23,
            -24,
            -18,
            -21,
            -22,
            -15,
            -29,
            -52,
            -26,
            -28,
            -27,
        ],
    ),
    "COMP": (
        [
            13,
            16,
            18,
            21,
            22,
            26,
            27,
            29,
            30,
            41,
            42,
            43,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            55,
            58,
            62,
            82,
            84,
            88,
            89,
            91,
            93,
        ],
        [
            29,
            29,
            -19,
            -23,
            -24,
            29,
            29,
            29,
            29,
            -18,
            -21,
            -22,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            29,
            -15,
            -29,
            29,
            -52,
            -26,
            -28,
            -27,
        ],
    ),
    "INTEGER": (
        [
            13,
            16,
            18,
            21,
            22,
            26,
            27,
            29,
            30,
            41,
            42,
            43,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            55,
            58,
            62,
            82,
            84,
            88,
            89,
            91,
            93,
        ],
        [
            31,
            31,
            -19,
            -23,
            -24,
            31,
            31,
            31,
            31,
            -18,
            -21,
            -22,
            31,
            31,
            31,
            31,
            31,
            31,
            31,
            31,
            31,
            31,
            -15,
            -29,
            31,
            -52,
            -26,
            -28,
            -27,
        ],
    ),
    "ZERO": (
        [
            13,
            16,
            18,
            21,
            22,
            26,
            27,
            29,
            30,
            41,
            42,
            43,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            55,
            58,
            62,
            82,
            84,
            88,
            89,
            91,
            93,
        ],
        [
            32,
            32,
            -19,
            -23,
            -24,
            32,
            32,
            32,
            32,
            -18,
            -21,
            -22,
            32,
            32,
            32,
            32,
            32,
            32,
            32,
            32,
            32,
            32,
            -15,
            -29,
            32,
            -52,
            -26,
            -28,
            -27,
        ],
    ),
    "ELGIO": (
        [
            13,
            16,
            18,
            21,
            22,
            26,
            27,
            29,
            30,
            41,
            42,
            43,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            55,
            58,
            62,
            82,
            84,
            88,
            89,
            91,
            93,
        ],
        [
            33,
            33,
            -19,
            -23,
            -24,
            33,
            33,
            33,
            33,
            -18,
            -21,
            -22,
            33,
            33,
            33,
            33,
            33,
            33,
            33,
            33,
            33,
            33,
            -15,
            -29,
            33,
            -52,
            -26,
            -28,
            -27,
        ],
    ),
    "RPAREN": (
        [
            14,
            24,
            31,
            32,
            33,
            36,
            37,
            38,
            39,
            56,
            57,
            58,
            59,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            73,
            74,
            75,
            76,
            77,
            78,
            80,
            83,
            87,
        ],
        [
            -52,
            -45,
            -43,
            -44,
            -46,
            60,
            -8,
            -9,
            -11,
            -41,
            74,
            -52,
            -12,
            -33,
            -34,
            -35,
            -36,
            -37,
            -38,
            -39,
            -40,
            -32,
            -42,
            83,
            -48,
            -49,
            -51,
            -10,
            -47,
            -50,
        ],
    ),
    "PLUS": (
        [
            24,
            25,
            31,
            32,
            33,
            53,
            54,
            56,
            57,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            73,
            74,
            78,
            83,
            87,
        ],
        [
            -45,
            45,
            -43,
            -44,
            -46,
            45,
            45,
            45,
            45,
            45,
            45,
            45,
            45,
            45,
            45,
            45,
            45,
            45,
            -42,
            45,
            -47,
            45,
        ],
    ),
    "MINUS": (
        [
            24,
            25,
            31,
            32,
            33,
            53,
            54,
            56,
            57,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            73,
            74,
            78,
            83,
            87,
        ],
        [
            -45,
            46,
            -43,
            -44,
            -46,
            46,
            46,
            46,
            46,
            46,
            46,
            46,
            46,
            46,
            46,
            46,
            46,
            46,
            -42,
            46,
            -47,
            46,
        ],
    ),
    "TIMES": (
        [
            24,
            25,
            31,
            32,
            33,
            53,
            54,
            56,
            57,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            73,
            74,
            78,
            83,
            87,
        ],
        [
            -45,
            47,
            -43,
            -44,
            -46,
            47,
            47,
            47,
            47,
            47,
            47,
            47,
            47,
            47,
            47,
            47,
            47,
            47,
            -42,
            47,
            -47,
            47,
        ],
    ),
    "DIVIDE": (
        [
            24,
            25,
            31,
            32,
            33,
            53,
            54,
            56,
            57,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            73,
            74,
            78,
            83,
            87,
        ],
        [
            -45,
            48,
            -43,
            -44,
            -46,
            48,
            48,
            48,
            48,
            48,
            48,
            48,
            48,
            48,
            48,
            48,
            48,
            48,
            -42,
            48,
            -47,
            48,
        ],
    ),
    "MAIOR": (
        [
            24,
            25,
            31,
            32,
            33,
            53,
            54,
            56,
            57,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            73,
            74,
            78,
            83,
            87,
        ],
        [
            -45,
            49,
            -43,
            -44,
            -46,
            49,
            49,
            49,
            49,
            49,
            49,
            49,
            49,
            49,
            49,
            49,
            49,
            49,
            -42,
            49,
            -47,
            49,
        ],
    ),
    "MENOR": (
        [
            24,
            25,
            31,
            32,
            33,
            53,
            54,
            56,
            57,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            73,
            74,
            78,
            83,
            87,
        ],
        [
            -45,
            50,
            -43,
            -44,
            -46,
            50,
            50,
            50,
            50,
            50,
            50,
            50,
            50,
            50,
            50,
            50,
            50,
            50,
            -42,
            50,
            -47,
            50,
        ],
    ),
    "IGUAL": (
        [
            24,
            25,
            31,
            32,
            33,
            53,
            54,
            56,
            57,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            73,
            74,
            78,
            83,
            87,
        ],
        [
            -45,
            51,
            -43,
            -44,
            -46,
            51,
            51,
            51,
            51,
            51,
            51,
            51,
            51,
            51,
            51,
            51,
            51,
            51,
            -42,
            51,
            -47,
            51,
        ],
    ),
    "DIFERENTE": (
        [
            24,
            25,
            31,
            32,
            33,
            53,
            54,
            56,
            57,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            73,
            74,
            78,
            83,
            87,
        ],
        [
            -45,
            52,
            -43,
            -44,
            -46,
            52,
            52,
            52,
            52,
            52,
            52,
            52,
            52,
            52,
            52,
            52,
            52,
            52,
            -42,
            52,
            -47,
            52,
        ],
    ),
    "COMMA": (
        [
            24,
            31,
            32,
            33,
            37,
            39,
            56,
            59,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            73,
            74,
            76,
            78,
            80,
            83,
            87,
        ],
        [
            -45,
            -43,
            -44,
            -46,
            61,
            -11,
            -41,
            -12,
            -33,
            -34,
            -35,
            -36,
            -37,
            -38,
            -39,
            -40,
            -32,
            -42,
            84,
            -51,
            -10,
            -47,
            -50,
        ],
    ),
    "EQUALS": (
        [
            24,
            28,
            33,
        ],
        [
            -30,
            55,
            -31,
        ],
    ),
    "SENAO": (
        [
            62,
            88,
        ],
        [
            -15,
            90,
        ],
    ),
    "ENTAO": (
        [
            71,
        ],
        [
            81,
        ],
    ),
}

_lr_action = {}
for _k, _v in _lr_action_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_action:
            _lr_action[_x] = {}
        _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {
    "program": (
        [
            0,
        ],
        [
            1,
        ],
    ),
    "component_list": (
        [
            0,
        ],
        [
            2,
        ],
    ),
    "component": (
        [
            0,
            2,
        ],
        [
            3,
            11,
        ],
    ),
    "empty": (
        [
            0,
            13,
            14,
            58,
            88,
        ],
        [
            4,
            17,
            38,
            77,
            91,
        ],
    ),
    "function_definition": (
        [
            0,
            2,
        ],
        [
            5,
            5,
        ],
    ),
    "main_block": (
        [
            0,
            2,
        ],
        [
            6,
            6,
        ],
    ),
    "type_specifier": (
        [
            0,
            2,
            13,
            14,
            16,
            61,
        ],
        [
            7,
            7,
            23,
            35,
            23,
            35,
        ],
    ),
    "block": (
        [
            0,
            2,
            72,
            79,
            86,
            92,
        ],
        [
            8,
            8,
            82,
            85,
            88,
            93,
        ],
    ),
    "statement_list_opt": (
        [
            13,
        ],
        [
            15,
        ],
    ),
    "statement_list": (
        [
            13,
        ],
        [
            16,
        ],
    ),
    "statement": (
        [
            13,
            16,
        ],
        [
            18,
            41,
        ],
    ),
    "variable_declaration": (
        [
            13,
            16,
        ],
        [
            19,
            19,
        ],
    ),
    "expression_statement": (
        [
            13,
            16,
        ],
        [
            20,
            20,
        ],
    ),
    "if_statement": (
        [
            13,
            16,
        ],
        [
            21,
            21,
        ],
    ),
    "while_statement": (
        [
            13,
            16,
        ],
        [
            22,
            22,
        ],
    ),
    "expression": (
        [
            13,
            16,
            26,
            27,
            29,
            30,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            55,
            58,
            84,
        ],
        [
            25,
            25,
            53,
            54,
            56,
            57,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            73,
            78,
            87,
        ],
    ),
    "lvalue": (
        [
            13,
            16,
            26,
            27,
            29,
            30,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            55,
            58,
            84,
        ],
        [
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
            28,
        ],
    ),
    "parameters_opt": (
        [
            14,
        ],
        [
            36,
        ],
    ),
    "parameter_list": (
        [
            14,
        ],
        [
            37,
        ],
    ),
    "parameter": (
        [
            14,
            61,
        ],
        [
            39,
            80,
        ],
    ),
    "argument_list_opt": (
        [
            58,
        ],
        [
            75,
        ],
    ),
    "argument_list": (
        [
            58,
        ],
        [
            76,
        ],
    ),
    "senao_opt": (
        [
            88,
        ],
        [
            89,
        ],
    ),
}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_goto:
            _lr_goto[_x] = {}
        _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
    ("S' -> program", "S'", 1, None, None, None),
    (
        "program -> component_list",
        "program",
        1,
        "p_program",
        "syntactic_interpreter.py",
        55,
    ),
    (
        "component_list -> component_list component",
        "component_list",
        2,
        "p_component_list",
        "syntactic_interpreter.py",
        59,
    ),
    (
        "component_list -> component",
        "component_list",
        1,
        "p_component_list",
        "syntactic_interpreter.py",
        60,
    ),
    (
        "component_list -> empty",
        "component_list",
        1,
        "p_component_list",
        "syntactic_interpreter.py",
        61,
    ),
    (
        "component -> function_definition",
        "component",
        1,
        "p_component",
        "syntactic_interpreter.py",
        77,
    ),
    (
        "component -> main_block",
        "component",
        1,
        "p_component",
        "syntactic_interpreter.py",
        78,
    ),
    (
        "function_definition -> type_specifier FUNCTION_NAME LPAREN parameters_opt RPAREN DOT block",
        "function_definition",
        7,
        "p_function_definition",
        "syntactic_interpreter.py",
        82,
    ),
    (
        "parameters_opt -> parameter_list",
        "parameters_opt",
        1,
        "p_parameters_opt",
        "syntactic_interpreter.py",
        92,
    ),
    (
        "parameters_opt -> empty",
        "parameters_opt",
        1,
        "p_parameters_opt",
        "syntactic_interpreter.py",
        93,
    ),
    (
        "parameter_list -> parameter_list COMMA parameter",
        "parameter_list",
        3,
        "p_parameter_list",
        "syntactic_interpreter.py",
        100,
    ),
    (
        "parameter_list -> parameter",
        "parameter_list",
        1,
        "p_parameter_list",
        "syntactic_interpreter.py",
        101,
    ),
    (
        "parameter -> type_specifier IDENTIFIER",
        "parameter",
        2,
        "p_parameter",
        "syntactic_interpreter.py",
        110,
    ),
    (
        "type_specifier -> INTEIRO",
        "type_specifier",
        1,
        "p_type_specifier",
        "syntactic_interpreter.py",
        114,
    ),
    (
        "main_block -> block",
        "main_block",
        1,
        "p_main_block",
        "syntactic_interpreter.py",
        118,
    ),
    (
        "block -> INICIO DOT statement_list_opt FIM DOT",
        "block",
        5,
        "p_block",
        "syntactic_interpreter.py",
        122,
    ),
    (
        "statement_list_opt -> statement_list",
        "statement_list_opt",
        1,
        "p_statement_list_opt",
        "syntactic_interpreter.py",
        129,
    ),
    (
        "statement_list_opt -> empty",
        "statement_list_opt",
        1,
        "p_statement_list_opt",
        "syntactic_interpreter.py",
        130,
    ),
    (
        "statement_list -> statement_list statement",
        "statement_list",
        2,
        "p_statement_list",
        "syntactic_interpreter.py",
        137,
    ),
    (
        "statement_list -> statement",
        "statement_list",
        1,
        "p_statement_list",
        "syntactic_interpreter.py",
        138,
    ),
    (
        "variable_declaration -> type_specifier IDENTIFIER",
        "variable_declaration",
        2,
        "p_variable_declaration",
        "syntactic_interpreter.py",
        151,
    ),
    (
        "statement -> variable_declaration DOT",
        "statement",
        2,
        "p_statement",
        "syntactic_interpreter.py",
        155,
    ),
    (
        "statement -> expression_statement DOT",
        "statement",
        2,
        "p_statement",
        "syntactic_interpreter.py",
        156,
    ),
    (
        "statement -> if_statement",
        "statement",
        1,
        "p_statement",
        "syntactic_interpreter.py",
        157,
    ),
    (
        "statement -> while_statement",
        "statement",
        1,
        "p_statement",
        "syntactic_interpreter.py",
        158,
    ),
    (
        "expression_statement -> expression",
        "expression_statement",
        1,
        "p_expression_statement",
        "syntactic_interpreter.py",
        165,
    ),
    (
        "if_statement -> SE expression DOT ENTAO DOT block senao_opt",
        "if_statement",
        7,
        "p_if_statement",
        "syntactic_interpreter.py",
        169,
    ),
    (
        "senao_opt -> SENAO DOT block",
        "senao_opt",
        3,
        "p_senao_opt",
        "syntactic_interpreter.py",
        181,
    ),
    (
        "senao_opt -> empty",
        "senao_opt",
        1,
        "p_senao_opt",
        "syntactic_interpreter.py",
        182,
    ),
    (
        "while_statement -> ENQUANTO expression DOT block",
        "while_statement",
        4,
        "p_while_statement",
        "syntactic_interpreter.py",
        189,
    ),
    ("lvalue -> IDENTIFIER", "lvalue", 1, "p_lvalue", "syntactic_interpreter.py", 196),
    ("lvalue -> ELGIO", "lvalue", 1, "p_lvalue", "syntactic_interpreter.py", 197),
    (
        "expression -> lvalue EQUALS expression",
        "expression",
        3,
        "p_expression_assign",
        "syntactic_interpreter.py",
        201,
    ),
    (
        "expression -> expression PLUS expression",
        "expression",
        3,
        "p_expression_binop",
        "syntactic_interpreter.py",
        228,
    ),
    (
        "expression -> expression MINUS expression",
        "expression",
        3,
        "p_expression_binop",
        "syntactic_interpreter.py",
        229,
    ),
    (
        "expression -> expression TIMES expression",
        "expression",
        3,
        "p_expression_binop",
        "syntactic_interpreter.py",
        230,
    ),
    (
        "expression -> expression DIVIDE expression",
        "expression",
        3,
        "p_expression_binop",
        "syntactic_interpreter.py",
        231,
    ),
    (
        "expression -> expression MAIOR expression",
        "expression",
        3,
        "p_expression_binop",
        "syntactic_interpreter.py",
        232,
    ),
    (
        "expression -> expression MENOR expression",
        "expression",
        3,
        "p_expression_binop",
        "syntactic_interpreter.py",
        233,
    ),
    (
        "expression -> expression IGUAL expression",
        "expression",
        3,
        "p_expression_binop",
        "syntactic_interpreter.py",
        234,
    ),
    (
        "expression -> expression DIFERENTE expression",
        "expression",
        3,
        "p_expression_binop",
        "syntactic_interpreter.py",
        235,
    ),
    (
        "expression -> COMP expression",
        "expression",
        2,
        "p_expression_comp_unary",
        "syntactic_interpreter.py",
        242,
    ),
    (
        "expression -> LPAREN expression RPAREN",
        "expression",
        3,
        "p_expression_group",
        "syntactic_interpreter.py",
        251,
    ),
    (
        "expression -> INTEGER",
        "expression",
        1,
        "p_expression_integer",
        "syntactic_interpreter.py",
        255,
    ),
    (
        "expression -> ZERO",
        "expression",
        1,
        "p_expression_zero",
        "syntactic_interpreter.py",
        259,
    ),
    (
        "expression -> IDENTIFIER",
        "expression",
        1,
        "p_expression_identifier_like",
        "syntactic_interpreter.py",
        263,
    ),
    (
        "expression -> ELGIO",
        "expression",
        1,
        "p_expression_identifier_like",
        "syntactic_interpreter.py",
        264,
    ),
    (
        "expression -> FUNCTION_NAME LPAREN argument_list_opt RPAREN",
        "expression",
        4,
        "p_expression_function_call",
        "syntactic_interpreter.py",
        268,
    ),
    (
        "argument_list_opt -> argument_list",
        "argument_list_opt",
        1,
        "p_argument_list_opt",
        "syntactic_interpreter.py",
        273,
    ),
    (
        "argument_list_opt -> empty",
        "argument_list_opt",
        1,
        "p_argument_list_opt",
        "syntactic_interpreter.py",
        274,
    ),
    (
        "argument_list -> argument_list COMMA expression",
        "argument_list",
        3,
        "p_argument_list",
        "syntactic_interpreter.py",
        281,
    ),
    (
        "argument_list -> expression",
        "argument_list",
        1,
        "p_argument_list",
        "syntactic_interpreter.py",
        282,
    ),
    ("empty -> <empty>", "empty", 0, "p_empty", "syntactic_interpreter.py", 292),
]
